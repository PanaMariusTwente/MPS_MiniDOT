package MiniDOT.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class ID_Constraints extends BaseConstraintsDescriptor {
  public ID_Constraints() {
    super(CONCEPTS.ID$Uy);
  }

  public static class ID_Property extends BasePropertyConstraintsDescriptor {
    public ID_Property(ConstraintsDescriptor container) {
      super(PROPS.ID$$XTe, container, false, false, true);
    }
    @Override
    public boolean validateValue(SNode node, Object propertyValue, CheckingNodeContext checkingNodeContext) {
      boolean result = staticValidateProperty(node, SPropertyOperations.castString(propertyValue));
      if (!(result) && checkingNodeContext != null) {
        checkingNodeContext.setBreakingNode(new SNodePointer("r:2f5f6491-13e9-46c3-b821-6db30753dffa(MiniDOT.constraints)", "6052719581118771850"));
      }
      return result;
    }
    private static boolean staticValidateProperty(SNode node, String propertyValue) {
      String[] keywords = {"graph", "digraph", "node", "edge", "subgraph", "strict"};
      for (String k : keywords) {
        if (k.equalsIgnoreCase(propertyValue)) {
          return false;
        }
      }
      return propertyValue.matches("[a-zA-Z\\u0080-\\u00FF_][a-zA-Z\\u0080-\\u00FF_0-9]*");
    }
  }
  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(PROPS.ID$$XTe, new ID_Property(this));
    return properties;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept ID$Uy = MetaAdapterFactory.getConcept(0x19ed932bf9694b45L, 0x993fc50c3cc8fe5cL, 0x53ff9463eda14812L, "MiniDOT.structure.ID");
  }

  private static final class PROPS {
    /*package*/ static final SProperty ID$$XTe = MetaAdapterFactory.getProperty(0x19ed932bf9694b45L, 0x993fc50c3cc8fe5cL, 0x53ff9463eda14812L, 0x53ff9463eda14813L, "ID");
  }
}
