package MiniDOT.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Attribute_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new AttributeList_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new Edge_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new EdgeTarget_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Graph_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new ID_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new Node_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new SingleLineComment_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }



  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x19ed932bf9694b45L, 0x993fc50c3cc8fe5cL, 0x53ff9463eda1480dL), MetaIdFactory.conceptId(0x19ed932bf9694b45L, 0x993fc50c3cc8fe5cL, 0x72cad682aea8f325L), MetaIdFactory.conceptId(0x19ed932bf9694b45L, 0x993fc50c3cc8fe5cL, 0x53ff9463eda14807L), MetaIdFactory.conceptId(0x19ed932bf9694b45L, 0x993fc50c3cc8fe5cL, 0x72cad682aeab60abL), MetaIdFactory.conceptId(0x19ed932bf9694b45L, 0x993fc50c3cc8fe5cL, 0x53ff9463eda0bd04L), MetaIdFactory.conceptId(0x19ed932bf9694b45L, 0x993fc50c3cc8fe5cL, 0x53ff9463eda14812L), MetaIdFactory.conceptId(0x19ed932bf9694b45L, 0x993fc50c3cc8fe5cL, 0x53ff9463eda14806L), MetaIdFactory.conceptId(0x19ed932bf9694b45L, 0x993fc50c3cc8fe5cL, 0x72cad682aebbcab7L)).seal();
}
