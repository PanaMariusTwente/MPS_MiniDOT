package MiniDOT.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;

public final class AttributeList__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x19ed932bf9694b45L, 0x993fc50c3cc8fe5cL, 0x72cad682aea8f325L, "MiniDOT.structure.AttributeList");

  public static final SMethod<Boolean> getCommaSeparators_id7baPCaIGvoo = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("getCommaSeparators").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(8271659522384328216L).languageId(0x993fc50c3cc8fe5cL, 0x19ed932bf9694b45L).build2();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getCommaSeparators_id7baPCaIGvoo);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static boolean getCommaSeparators_id7baPCaIGvoo(@NotNull SNode __thisNode__) {
    SNode graph = SNodeOperations.getNodeAncestor(__thisNode__, CONCEPTS.Graph$K4, false, false);
    return (graph != null ? SPropertyOperations.getBoolean(graph, PROPS.commaSeparators$herG) : false);
  }

  /*package*/ AttributeList__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Boolean) getCommaSeparators_id7baPCaIGvoo(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Graph$K4 = MetaAdapterFactory.getConcept(0x19ed932bf9694b45L, 0x993fc50c3cc8fe5cL, 0x53ff9463eda0bd04L, "MiniDOT.structure.Graph");
  }

  private static final class PROPS {
    /*package*/ static final SProperty commaSeparators$herG = MetaAdapterFactory.getProperty(0x19ed932bf9694b45L, 0x993fc50c3cc8fe5cL, 0x53ff9463eda0bd04L, 0x72cad682aeb1e423L, "commaSeparators");
  }
}
